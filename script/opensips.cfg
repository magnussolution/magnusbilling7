######################################################################
## Core Parameters
######################################################################
# chroot=
# group="opensips"
# user="opensips"
# dbversion_table=
disable_core_dump=no
max_while_loops=100
maxbuffer=262144
memdump=3
memlog=2
# open_files_limit=2048
server_signature=no
server_header="Server: MagnusSipProxy"
user_agent_header="User-Agent: Magnus SipProxy"

######################################################################
## Core Fork Parameters
######################################################################
#fork=yes
children=8
tcp_children=8

######################################################################
## Core Logging Parameters
######################################################################
log_level=-1
sip_warning=0
log_stderror=no
log_facility=LOG_LOCAL0


######################################################################
## Aliases
######################################################################
auto_aliases=yes
alias=localhost
alias=localhost.localdomain

advertised_address="MYIP"
alias="MYIP"


######################################################################
## Connectivity
######################################################################
listen=udp:LOCALIP:5060

tos=IPTOS_LOWDELAY
mcast_loopback=no
mcast_ttl=1
mhomed=0

tcp_connect_timeout=3
tcp_connection_lifetime=120
tcp_max_connections=2048


######################################################################
## DNS
######################################################################
dns=no
dns_retr_time=1
dns_retr_no=3
# dns_servers_no=2
dns_try_ipv6=no
disable_dns_blacklist=yes
disable_dns_failover=no
dns_use_search_list=no
rev_dns=no

######################################################################
## SIP
######################################################################
check_via=0
#! disable_503_translation=no
disable_stateless_fwd=no
#disable_tcp=no


####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules"


loadmodule "db_mysql.so"

######################################################################
## Localcache Module Parameters
######################################################################
loadmodule "cachedb_local.so"
modparam("cachedb_local", "cache_clean_period", 120)


#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"
modparam("sl", "enable_stats", 1)

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 2)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)
modparam("tm", "pass_provisional_replies", 1)


loadmodule "dialog.so"


#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 1)
modparam("rr", "enable_double_rr", 0)
modparam("rr", "add_username", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"


######################################################################
## Path Module Parameters
######################################################################
loadmodule "path.so"
modparam("path", "use_received", 1)

loadmodule "textops.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


######################################################################
## AVPops Module Parameters
######################################################################
loadmodule "avpops.so"
modparam("avpops","db_url","mysql://MYSQLUSER:MYSQLPASS@localhost/opensips")

modparam("avpops","avp_table","usr_preferences")
modparam("avpops", "uuid_column", "uuid")       
modparam("avpops", "username_column", "username")
modparam("avpops", "domain_column", "domain")    
modparam("avpops", "attribute_column", "attribute")
modparam("avpops", "value_column", "value")        
modparam("avpops", "type_column", "type")  

loadmodule "domain.so"
modparam("domain", "db_url","mysql://MYSQLUSER:MYSQLPASS@localhost/opensips")
modparam("domain", "db_mode", 1) 

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)
modparam("uri", "db_url", "mysql://MYSQLUSER:MYSQLPASS@localhost/opensips")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", '6')
modparam("usrloc", "desc_time_order", 0)
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "matching_mode", 0)
modparam("usrloc", "cseq_delay", 20)
modparam("usrloc", "hash_size", 9)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_url",  "mysql://MYSQLUSER:MYSQLPASS@localhost/opensips")
# modparam("usrloc", "fetch_rows", 2000)
modparam("usrloc", "user_column", "username")
modparam("usrloc", "domain_column", "domain")
modparam("usrloc", "contact_column", "contact")
modparam("usrloc", "expires_column", "expires")
modparam("usrloc", "q_column", "q")
modparam("usrloc", "callid_column", "callid")
modparam("usrloc", "cseq_column", "cseq")
modparam("usrloc", "methods_column", "methods")
modparam("usrloc", "flags_column", "flags")
modparam("usrloc", "cflags_column", "cflags")
modparam("usrloc", "user_agent_column", "user_agent")
modparam("usrloc", "received_column", "received")
modparam("usrloc", "socket_column", "socket")
modparam("usrloc", "path_column", "path")



######################################################################
## Nathelper Module Parameters
######################################################################
loadmodule "nathelper.so"
modparam("nathelper", "received_avp", "$avp(42)")
modparam("nathelper", "received_avp", "$avp(42)")
modparam("nathelper", "natping_interval", 10)
#modparam("nathelper", "natping_socket", "MYIP:5060")
modparam("nathelper", "received_avp", "$avp(42)")
modparam("nathelper", "sipping_bflag", "SIP_PING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@MYIP")
modparam("nathelper", "sipping_method", "OPTIONS")


loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock","udp:localhost:7890")


######################################################################
## UAC Redirect Module Parameters
######################################################################
loadmodule "uac_redirect.so"
modparam("uac_redirect", "default_filter", "accept")


######################################################################
## Dispatcher Module Parameters
######################################################################
loadmodule "dispatcher.so"

#modparam("dispatcher", "list_file", "/etc/opensips/dispatcher.list")
modparam("dispatcher", "db_url", "mysql://MYSQLUSER:MYSQLPASS@localhost/opensips")
modparam("dispatcher", "dst_avp", "$avp(271)")
modparam("dispatcher", "attrs_avp", "$avp(272)")
modparam("dispatcher", "grp_avp", "$avp(273)")
modparam("dispatcher", "cnt_avp", "$avp(274)")
modparam("dispatcher", "hash_pvar", "$avp(273)")
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:sipcheck@MYIP:5060")
modparam("dispatcher", "ds_ping_interval", 10)
modparam("dispatcher", "ds_probing_threshhold", 3)
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "options_reply_codes", "501,403,404,400,200")


##### alias_db.so
loadmodule "alias_db.so"
modparam("alias_db", "db_url", "mysql://MYSQLUSER:MYSQLPASS@localhost/opensips") # CUSTOMIZE ME


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", '7')
modparam("registrar", "default_expires", 3600)
modparam("registrar", "received_avp", "$avp(42)")
modparam("registrar", "max_contacts", 10)
modparam("registrar", "default_expires", 1800)
modparam("registrar", "min_expires", 120)
modparam("registrar", "max_expires", 3600)

modparam("auth_db|usrloc|uri", "use_domain", 1)



#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 0)
modparam("auth_db", "password_column", "ha1")
modparam("auth_db", "password_column_2", "ha1b") 
modparam("auth_db", "db_url","mysql://MYSQLUSER:MYSQLPASS@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "skip_version_check", 1)



# ----- permission params ----
loadmodule "permissions.so"
modparam("permissions", "db_url","mysql://MYSQLUSER:MYSQLPASS@localhost/opensips")


#### UDP protocol
loadmodule "proto_udp.so"


loadmodule "uac_auth.so"

#---- UAC Params ----
loadmodule "uac.so"
modparam("uac","restore_mode","auto")


#---- ratelimit Params ----
loadmodule "ratelimit.so"
modparam("ratelimit", "expire_time", 1)




####### Routing Logic ########

# main request routing logic

route{


    route(preadmission);

    route(sequential);

    ## Other checks, cancel, retransmissions, preloaded routes and rr
    route(cancel);

    route(initial);

}

route[initial] {


    if (loose_route()) {
        xlog("L_INFO", "SCRIPT: Attempt to route w/preloaded routes [$rm/f=$fu/r=$ru/c=$ct/$ci/$si/$cs]\n");
        if (!is_method("ACK")){
            sl_send_reply("403","Preload Route denied");
        }
        exit;
    }

   
        
    # If the request is a register we will pass it along but we need
    # to add the path header (along with the received IP/port info)
    if (is_method("REGISTER"))
    {            
        route(register);
        exit;
    }

    # for all initial request (not having been processed above in the has_totag)
    # that are not a register or message add this sever to the route set on the
    # request so subsequent messages come through this server
    if (!is_method("REGISTER|MESSAGE"))
    {   
        # Record the route that this request has taken
        # so we remain in the signaling path
        record_route();
    }

    #Check for incomplete addresses
    if($rU==NULL) {
        xlog("L_INFO","SCRIPT: 484 Address Incomplete [$rm/f=$fu/r=$ru/c=$ct/$ci/$si/$cs]");
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    if(check_address("0","$si", "$sp","$oP","$avp(context)","$rU")){
        $var(source)="ipauth";
        xlog("L_INFO", "$ci|log|$si autenticado por ip");
       
        route(ipauth);
    }else{
        $var(source)="local";
        route(internal); 
    }
}

route[preadmission] {
    
    # log the basic info regarding this call
    xlog("L_INFO", "$ci|start|recieved $oP request $rm $ou");
    xlog("L_INFO", "$ci|log|source $si:$sp");
    xlog("L_INFO", "$ci|log|from $fu");
    xlog("L_INFO", "$ci|log|to $tu");

    #Check for loops
    if (!mf_process_maxfwd_header("70")) {
        t_reply("483", "Too many hops");
    }



    #Check if OpenSIPS is under atack by svcrack from sipvicious
    if(($ua=~"friendly-scanner")) {
       xlog("L_WARN", "OpenSIPS is under attack by $si:$sp header friendly-scanner\n");
       xlog("Blocking traffic from $si\n");
       drop();
       exit;
    }

    #Check for flooding


    #Answer OPTIONS or request directed to the proxy
    if(is_method("NOTIFY|OPTIONS")) {
        sl_send_reply("200","OK");
        exit;
    }

    if (is_method("PUBLISH|SUBSCRIBE"))
    {
        sl_send_reply("503", "Service Unavailable");
        exit;
    }
}

route[sequential] {


    # if the to header has a tag attached then it implies this request
    # has been processed by us before (IE: a media server has added
    # its tag on the to header in prior messages)
    if (has_totag())
    {  
        if ( is_method("ACK") )
        {
            $avp(dialogtimeout)=7200;
        } 
        xlog("L_INFO", "has_totag TRUE $rm ");
        # sequential request within a dialog should
        # take the path determined by record-routing
        if (loose_route())
        {
            xlog("L_INFO", "$ci|log|In Loose Route");
            append_hf("P-hint: rr-enforced\r\n");

            record_route();

            if (is_method("INVITE") || is_method("ACK") )
            {   
                xlog("L_INFO", "has_totag fix_nated_contact");     
                fix_nated_contact();
                #use_media_proxy();                                                                                                                                                                                   
            }                                      
        
            # if we have locked this call to a media server then
            # maintain that association

            xlog("L_INFO", "$ci|log|forwarding based on the route set");

     
            route(external_to_internal_relay);
            
            exit();
        }
        else if ( is_method("ACK") )
        {
            if ( t_check_trans() )
            {
                # non loose-route, but stateful ACK; must be an ACK after
                # a 487 or e.g. 404 from upstream server
                xlog("L_INFO", "$ci|log|in dialog request belongs to a known transaction");

                route(logged_relay);
            }

            exit();
        }
        else if ( is_method("NOTIFY") )
        {
            route(logged_relay);

            exit();
        }

        # request with a to tag that cant be routed loosly and is not an ACK
        # ignor eand discard
        xlog("L_WARN", "$ci|end|could not route in dialog");

        sl_send_reply("486", "PC Load Letter");

        exit();
    }

     #Drop lost ACKs
    if(is_method("ACK")){
        t_newtran();
        exit;
    }
}

route[cancel] {
    #CANCEL processing
    if (is_method("CANCEL"))  {
        if (t_check_trans()){
            t_relay();
            exit;
        }
    }

    #Retransmissions handler
    t_check_trans();
}

route[register]
{


    fix_nated_register();
    fix_nated_contact();

    xlog("L_INFO", "$ci|$rm|Trying to register user $fU");


    if(!search("^Contact:[ ]*\*") && nat_uac_test("19")) 
    {                                                    
        xlog("L_INFO", "$ci|$rm|Nated Client $fU");
        fix_nated_register();                                        
    }                                                                                   

    if (!www_authorize("","subscriber"))
    {          
        switch ($retcode) {
            case -5:
                xlog("L_INFO","$ci|$rm|Error 5");
                break;
            case - 2:
                xlog("L_INFO", "$ci|$rm|Wrong password for user $fU");
                xlog("Blocking traffic from $si\n");
                sl_send_reply("401", "Wrong password");
                break;
            case - 1:
                xlog("L_INFO", "$ci|$rm|User doesnt exist $fU domain $td");
                xlog("Blocking traffic from $si\n");
                sl_send_reply("401", "User doesnt exist");
                break;
        }
        xlog("L_INFO", "$ci|$rm|Send challenge to user $fU");                        
        www_challenge("","0");      
        exit;                       
    }        

    if (!db_check_to()) 
    {      
        xlog("L_INFO", "$ci|$rm|Forbidden to user $fU");          
        sl_send_reply("403","Forbidden");
        exit;                            
    }    
    
    if (!save("location")) {
            xlog("L_INFO", "$ci|$rm|Cant save on location table");
            sl_reply_error();
    }
     xlog("L_INFO", "$ci|$rm|User register OK user $fU"); 
    consume_credentials();
}

route[ipauth] {
    route("nat_test_and_correct");

    remove_hf("X-AUTH-IP");
    remove_hf("P-Accountcode");
    remove_hf("P-SipAccount");

    $avp(accountcode):=$(avp(context){s.select,0,|});
    $avp(sipname):=$(avp(context){s.select,1,|});    
    $avp(cpslimit):=$(avp(context){s.select,2,|}{s.int});

    append_hf("X-AUTH-IP: $si\r\n");
    append_hf("P-Accountcode: $avp(accountcode)\r\n");
    append_hf("P-SipAccount: $avp(sipname)\r\n"); 

    route(sendcall);
}


route[internal] {
    #Internal authenticated calls
    #User Authentication
    $avp(srcuri):=$fu;
    xlog("L_INFO", "SCRIPT: Call from an internal domain [$rm/f=$fu/r=$ru/c=$ct/$ci/$si/$cs]\n");

    $var(auth_code) = proxy_authorize("", "subscriber");
    if ( $var(auth_code) == -1 || $var(auth_code) == -2 ) {
        xlog("Blocking traffic from $si\n");
        xlog("L_WARN","SCRIPT: Auth Error for $fU from $avp(srcip) cause $var(auth_code)\n");
    }
    if ( $var(auth_code) < 0 ) {
        proxy_challenge("", "1");
        exit;
    }
    xlog("L_INFO", "Auth from DB $fU");

    if (!db_check_from()) {
        sl_send_reply("403","Forbidden auth ID");
        exit;
    }

    consume_credentials();       

    route("nat_test_and_correct");
    remove_hf("X-AUTH-IP");
    remove_hf("P-Accountcode");
    remove_hf("P-SipAccount");

    append_hf("X-AUTH-IP: $si\r\n"); 
    
    uac_replace_from("","sip:sipproxy@$fd"); 

    if(cache_fetch("local", "usrdata_$fU", $avp(parameters))) {
        $avp(accountcode):=$(avp(parameters){s.select,0,;});
        $avp(cpslimit):=$(avp(parameters){s.select,1,;}{s.int});
    }else if(avp_db_query("SELECT accountcode, cpslimit FROM subscriber WHERE username='$fU'","$avp(accountcode);")){
        cache_store("local", "usrdata_$fU","$avp(accountcode);$avp(cpslimit);",3600);
    }
    append_hf("P-Accountcode: $avp(accountcode)\r\n");
    append_hf("P-SipAccount: $fU\r\n");
    route(sendcall);

}


    
route[sendcall] {


    if( $avp(cpslimit) > 0 ){

        if (!rl_check("$avp(accountcode)", "$avp(cpslimit)", "RED")) {
            xlog("check cps limit $avp(accountcode) was more than $avp(cpslimit) CPS");
            sl_send_reply("403", "CPS Limit Exceeded");
            exit;
        };
    }


    # if the request is not from a media server it must be for one,
    # there is much work to do!

    # load a list of currently active media servers
    # if no media server could be set with ds_select_domain then there are no
    # active servers, no need to conitnue
    if (!ds_select_domain("1", "4"))
    {
        xlog("L_INFO", "$ci|end|no servers avaliable");

        sl_send_reply("503", "No servers avaliable!");
        exit;
    }else{
        xlog("L_INFO", "$ci|SELECT SERVER $rd");
    }

    if (cache_fetch("local", "$ci", $avp(55)))
    {
        xlog("L_INFO", "$ci|log|request $ou is associated with media server $avp(55)");
        $rd = $(avp(55));
    }

    $avp(final_reply_timer) = 2;

    t_on_reply("internal_reply");
    t_on_failure("internal_fault");

    route("logged_relay");

}


route[external_to_internal_relay]
{

    route("nat_test_and_correct");

    $avp(final_reply_timer) = 2;

    t_on_reply("internal_reply");
    t_on_failure("internal_fault");

    route("logged_relay");

    exit;
}

route[logged_relay]
{
    # try to send the request on its way, if it fails send back a
    # stateless error to the requestor
    if (t_relay())
    {   
        xlog("L_INFO", "$ci|pass| SENDTO SERVER $rd:$rp");
    }
    else
    {
        xlog("L_INFO", "$ci|end|unable to relay message");

        sl_reply_error();
    }
}


route[nat_test_and_correct]
{

    if (nat_uac_test("2"))
    {
        xlog("L_INFO", "$ci|log|NAT address in Via differs from source IP");

        # adds the rport parameter to the first Via header
        force_rport();

        fix_nated_contact();
    }

    # if the request has a body see if it needs NAT corrections as well,
    # this check looks at:
    # 8. SDP is searched for occurrence of RFC1918 addresses
    if (has_body("application/sdp") && nat_uac_test("8"))
    {
        xlog("L_INFO", "$ci|log|SDP contains a RFC1918 address");

        # alters the SDP information in order to facilitate NAT traversal.
        # 2. rewrite media IP address (c=) with source IP
        # 8. rewrite IP from origin description (o=) with source IP
        fix_nated_sdp("10");
    }
}



onreply_route[internal_reply]
{
    # this branch handles replies that are comming from our media server

    if ($T_reply_code=="401")
    {
        xlog("L_INFO", "$ci|CRIAR CACHE para 401 to server $si:$sp");
        cache_store("local", "$ci", "$si", 3600);
    }
    if(t_local_replied("last"))
    {
        xlog("L_INFO", "$ci|start|recieved local internal reply $T_reply_code $rr");
    }
    else
    {
        
        xlog("L_INFO", "$ci|start|recieved internal reply $T_reply_code $rr");
        xlog("L_INFO", "$ci|log|source $si:$sp");
    }

    if (is_method("BYE"))
    {
        cache_remove("local", "$ci");
        xlog("L_INFO", "$ci|log|cleaned up call id from cache");
    }

    xlog("L_INFO", "$ci|log|source $si:$sp teste");


}

failure_route[internal_fault]
{
    # this branch handles failures (>=300) to our media servers,
    # which we can sometimes overcome by routing to another server

    # if the failure cause was due to the transaction being
    # cancelled then we are complete
    if (t_was_cancelled())
    {
        xlog("L_INFO", "$ci|log|transaction was cancelled");

        # remove the association between the call-id and the media server (if one)
        # but leave the contact user and server to support transfers
        cache_remove("local", "$ci");

        xlog("L_INFO", "$ci|end|cleaned up call id from cache - internal fault");

        exit;
    }

    # if the failure case was soemthing that we should recover
    # from then try to find a new media server
    if (t_check_status("(401)|(407)|(403)"))
    {
        xlog("L_INFO", "$ci|log|failure route ignoring auth reply $T_reply_code $rr");
    }
    else if (t_check_status("402"))
    {
        send_reply("486", "More money please");

        exit();
    }
    else if (t_check_status("^503$")) {
        t_reply("503", "Service Unavailable");
        exit;
    }
    else if (t_check_status("(4[0-9][0-9])|(5[0-9][0-9])"))
    {
        t_on_reply("internal_reply");
    }


}
